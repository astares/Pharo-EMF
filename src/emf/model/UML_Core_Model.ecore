<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="UML_Core_Model" nsURI="http://pharo.org/UML" nsPrefix="uml">
  <eSubpackages name="Model" nsURI="href://pharo.org/UML" nsPrefix="uml">
    <eClassifiers xsi:type="ecore:EClass" name="UMLElement" eSuperTypes="UML_XMI_Extensions.ecore#//Model/XMIExtensibleModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element is an atomic constituent of a model"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamedElement" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Named elements"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Name" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLModelElement" eSuperTypes="#//Model/UMLNamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A model element is an element that is an abstraction drawn from the system being modeled. Contrast with view element, which is an element whose purpose is to provide a presentation of information for human comprehension.&#xD;&#xA;&#xD;&#xA;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the UML. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.&#xD;&#xA;&#xD;&#xA;Each ModelElement can be regarded as a template. A template has a set of templateParameters that denotes which of the parts of a ModelElement are the template parameters. A ModelElement is a template when there is at least one template parameter. If it is not a template, a ModelElement cannot have template parameters. However, such embedded parameters are not usually complete and need not satisfy well-formedness rules. It is the arguments supplied when the template is instantiated that must be well formed.&#xD;&#xA;&#xD;&#xA;Partially instantiated templates are allowed. This is the case when there are arguments provided for some, but not all templateParameters. A partially instantiated template is still a template, since it still has parameters."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Visibility" eType="#//Enumerations/UMLVisibilityKind"
          defaultValueLiteral="Public"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSpecification" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Comment" upperBound="-1"
          eType="#//Model/UMLComment" eOpposite="#//Model/UMLComment/AnnotatedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParameterOwner" eType="#//Model/UMLTemplateParameter"
          eOpposite="#//Model/UMLTemplateParameter/Parameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" containment="true" eOpposite="#//Model/UMLTemplateParameter/Template"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" eOpposite="#//Model/UMLTemplateParameter/DefaultElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateArgument" eType="#//Model/UMLTemplateArgument"
          eOpposite="#//Model/UMLTemplateArgument/ModelElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Namespace" eType="#//Model/UMLNamespace"
          eOpposite="#//Model/UMLNamespace/OwnedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Container" eType="#//Model/UMLComponent"
          eOpposite="#//Model/UMLComponent/Resident"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SupplierDependency" upperBound="-1"
          eType="#//Model/UMLDependency" eOpposite="#//Model/UMLDependency/Supplier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClientDependency" upperBound="-1"
          eType="#//Model/UMLDependency" eOpposite="#//Model/UMLDependency/Client"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ElementImport" upperBound="-1"
          eType="#//Model/UMLElementImport" eOpposite="#//Model/UMLElementImport/ImportedElement"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComment" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A comment is an annotation attached to a model element or a set of model elements. It has no semantic force but may contain information useful to the modeler."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A string that is the comment."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AnnotatedElement" upperBound="-1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/Comment"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateParameter" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the relationship between a template (a ModelElement) and its parameter (a ModelElement). A ModelElement with at least one templateParameter association is a template (by definition)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/ParameterOwner"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ParameterType" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Template" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/TemplateParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultElement" eType="#//Model/UMLModelElement"
          eOpposite="#//Model/UMLModelElement/DefaultParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateArgument" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reifies the relationship between a Binding and one of its arguments (a ModelElement)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ModelElement" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/TemplateArgument"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLGeneralizableElement" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A generalizable element is a model element that may participate in a generalization relationship."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeave" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Generalization" upperBound="-1"
          eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Child"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Specialization" upperBound="-1"
          eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Parent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamespace" eSuperTypes="#//Model/UMLGeneralizableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A namespace is a part of a model that contains a set of ModelElements each of whose names designates a unique element within the namespace.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, like Associations and Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace have additional constraints on which kind of elements may be contained. Namespace is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a package or a class declared inside the scope of another class."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedElement" ordered="false"
          upperBound="-1" eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/Namespace"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClassifier" eSuperTypes="#//Model/UMLNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Classifier is the metamodel superclass of Class, DataType, and Interface. All of these have similar syntax and are therefore all notated using the rectangle symbol with keywords used as necessary. Because classes are most common in diagrams, a rectangle without a keyword represents a class, and the other subclasses of Classifier are indicated with keywords. In the sections that follow, the discussion will focus on Class, but most of the notation applies to the other element kinds as semantically appropriate and as described later under their own sections."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedParameter" upperBound="-1"
          eType="#//Model/UMLParameter" eOpposite="#//Model/UMLParameter/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Operation" eType="#//Model/UMLOperation"
          containment="true" eOpposite="#//Model/UMLOperation/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Attribute" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedFeature" upperBound="-1"
          eType="#//Model/UMLStructuralFeature" eOpposite="#//Model/UMLStructuralFeature/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedPort" upperBound="-1"
          eType="#//Model/UMLPort" eOpposite="#//Model/UMLPort/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedConnector" upperBound="-1"
          eType="#//Model/UMLConnector" containment="true" eOpposite="#//Model/UMLConnector/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Association" upperBound="-1"
          eType="#//Model/UMLAssociationEnd" eOpposite="#//Model/UMLAssociationEnd/Participant"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="PowertypeGeneralization"
          upperBound="-1" eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Powertype"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLFeature" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A feature is a property, like operation or attribute, which is encapsulated within a Classifier."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="OwnerScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ConnectorEnd" upperBound="-1"
          eType="#//Model/UMLConnectorEnd" eOpposite="#//Model/UMLConnectorEnd/Role"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLMethod" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A method is the implementation of an operation. It specifies the algorithm or procedure that effects the results of an operation.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Method is a declaration of a named piece of behavior in a Classifier and realizes one (directly) or a set (indirectly) of Operations of the Classifier.&#xD;&#xA;&#xD;&#xA;There may be at most one method for a particular classifier (as owner of the method) and operation (as specification of the method) pairing.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Specification" lowerBound="1"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/Method"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLOperation" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An operation is a service that can be requested from an object to effect behavior. An operation has a signature, which describes the actual parameters that are possible (including possible return values).&#xD;&#xA;&#xD;&#xA;In the metamodel, an Operation is a BehavioralFeature that can be applied to the Instances of the Classifier that contains the Operation."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Concurrency" eType="#//Enumerations/UMLCallConcurrencyKind"
          defaultValueLiteral="Sequential"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeaf" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Specification" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Method" upperBound="-1"
          eType="#//Model/UMLMethod" eOpposite="#//Model/UMLMethod/Specification"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Operation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLParameter" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A parameter is an unbound variable that can be changed, passed, or returned. A parameter may include a name, type, and direction of communication. Parameters are used in the specification of operations, messages and events, templates, etc.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Parameter is a declaration of an argument to be passed to, or returned from, an Operation, a Signal, etc."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DefaultValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DirectionKind" eType="#//Enumerations/UMLParameterDirectionKind"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="BehavioralFeature" eType="#//Model/UMLBehavioralFeature"
          eOpposite="#//Model/UMLBehavioralFeature/Parameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLBehavioralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A behavioral feature refers to a dynamic feature of a model element, such as an operation or method."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsQuery" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" upperBound="-1"
          eType="#//Model/UMLParameter" containment="true" eOpposite="#//Model/UMLParameter/BehavioralFeature"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAttribute" eSuperTypes="#//Model/UMLStructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An attribute is a named slot within a classifier that describes a range of values that instances of the classifier may hold."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="InitialValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Attribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationEnd" eType="#//Model/UMLAssociationEnd"
          eOpposite="#//Model/UMLAssociationEnd/Qualifier"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStructuralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A structural feature refers to a static feature of a model element, such as an attribute.&#xD;&#xA;&#xD;&#xA;In the metamodel, a StructuralFeature declares a structural aspect of an Instance of a Classifier, such as an Attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Changeability" eType="#//Enumerations/UMLChangeableKind"
          defaultValueLiteral="Changeable"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TargetScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Ordering" eType="#//Enumerations/UMLOrderingKind"
          defaultValueLiteral="Unordered"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedFeature"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClass" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsActive" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationClass" eType="#//Model/UMLAssociationClass"
          eOpposite="#//Model/UMLAssociationClass/ClassSide"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInterface" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An interface is a named set of operations that characterize the behavior of an element.&#xD;&#xA;&#xD;&#xA;In the metamodel, an Interface contains a set of Operations that together define a service offered by a Classifier realizing the Interface. A Classifier may offer several services, which means that it may realize several Interfaces, and several Classifiers may realize the same Interface.&#xD;&#xA;&#xD;&#xA;Interfaces are GeneralizableElements.&#xD;&#xA;&#xD;&#xA;Interfaces may not have Attributes, Associations, or Methods. An Interface may participate in an Association provided the Interface cannot see the Association; that is, a Classifier (other than an Interface) may have an Association to an Interface that is navigable from the Classifier but not from the Interface."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDataType" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A data type is a type whose values have no identity; that is, they are pure values. Data types include primitive built-in types (such as integer and string) as well as definable enumeration types (such as the predefined enumeration type boolean whose literals are false and true)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPrimitive" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Primitive defines a predefined DataType, without any relevant UML substructure; that is, it has no UML parts. A primitive datatype may have an algebra and operations defined outside of UML (for example, mathematically). Primitive datatypes used in UML itself include Integer, UnlimitedInteger, and String.&#xD;&#xA;&#xD;&#xA;The run-time instances of a Primitive datatype are DataValues. The values are in manyto-one correspondence to mathemetical elements defined outside of UML (for example, the various integers).&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLEnumeration" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel, Enumeration defines a kind of DataType whose range is a list of predefined values, called enumeration literals.&#xD;&#xA;&#xD;&#xA;Enumeration literals can be copied, stored as values, and passed as arguments. They are ordered within their enumeration datatype. An enumeration literal can be compared for an exact match or to a range within its enumeration datatype. There is no other algebra defined on them (e.g., they cannot be added or subtracted).&#xD;&#xA;&#xD;&#xA;The run-time instances of a Primitive datatype are Values. Each such value corresponds to exactly one EnumerationLiteral defined as part of the Enumeration type itself. An Enumeration may have operations, but they must be pure functions (this is the rule for all DataType elements)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Literal" lowerBound="1"
          upperBound="-1" eType="#//Model/UMLEnumerationLiteral" containment="true"
          eOpposite="#//Model/UMLEnumerationLiteral/Enumeration"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLArtifact" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An Artifact represents a physical piece of information that is used or produced by a software development process. Examples of Artifacts include models, source files, scripts, and binary executable files. An Artifact may constitute the implementation of a deployable component."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeploymentLocation" lowerBound="1"
          eType="#//Model/UMLNode" eOpposite="#//Model/UMLNode/DeployedArtifact"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ImplementationLocation"
          upperBound="-1" eType="#//Model/UMLComponent" eOpposite="#//Model/UMLComponent/Implementation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNode" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A node is a run-time physical object that represents a computational resource, generally having at least a memory and often processing capability as well, and upon which components may be deployed.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Node is a subclass of Classifier. It is associated with a set of Components that are deployed on the Node."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeployedArtifact" upperBound="-1"
          eType="#//Model/UMLArtifact" eOpposite="#//Model/UMLArtifact/DeploymentLocation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeployedComponent" upperBound="-1"
          eType="#//Model/UMLComponent" eOpposite="#//Model/UMLComponent/DeploymentLocation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComponent" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A component represents a modular, deployable, and replaceable part of a system that encapsulates implementation and exposes a set of interfaces."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Resident" upperBound="-1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/Container"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Implementation" upperBound="-1"
          eType="#//Model/UMLArtifact" eOpposite="#//Model/UMLArtifact/ImplementationLocation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeploymentLocation" upperBound="-1"
          eType="#//Model/UMLNode" eOpposite="#//Model/UMLNode/DeployedComponent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLProgrammingLanguageDataType" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A data type is a type whose values have no identity (i.e., they are pure values). A programming language data type is a data type specified according to the semantics of a particular programming language, using constructs available in that language. There are a wide variety of programming languages and many of them include type constructs not included as UML classifiers. In some cases, it is important to represent those constructs such that their exact form in the programming language is available. The ProgrammingLanguageData type captures such programming language types in a language-dependent fashion. They are represented by the name of the language and a string characterizing them, subject to interpretation by the particular language. Because they are dependent on particular languages, they are not portable among languages (except by agreement among the languages) and they do not map into other UML classifiers. Their semantics is therefore opaque within UML except by special interpretation by a profile intended for the particular language.&#xD;&#xA;&#xD;&#xA;Note that many or most programming language types can be directly represented using other UML classifiers, and such representation makes available deeper semantic analysis.&#xD;&#xA;&#xD;&#xA;A ProgrammingLanguageDataType may omit its name. Two ProgrammingLanguageDataType elements without names are not considered equivalent."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Expression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLEnumerationLiteral" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An EnumerationLiteral defines an element of the run-time extension of an Enumeration data type. It has no relevant substructure, that is, it is atomic. The enumeration literals of a particular Enumeration datatype are ordered."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Enumeration" lowerBound="1"
          eType="#//Model/UMLEnumeration" eOpposite="#//Model/UMLEnumeration/Literal"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLConnectorEnd" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Role" lowerBound="1"
          eType="#//Model/UMLFeature" eOpposite="#//Model/UMLFeature/ConnectorEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Connnector" lowerBound="1"
          eType="#//Model/UMLConnector" eOpposite="#//Model/UMLConnector/End"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLConnector" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="End" upperBound="-1"
          eType="#//Model/UMLConnectorEnd" containment="true" eOpposite="#//Model/UMLConnectorEnd/Connnector"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedConnector"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDependency" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A term of convenience for a Relationship other than Association, Generalization, Flow, or metarelationship (such as the relationship between a Classifier and one of its Instances)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Supplier" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/SupplierDependency"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Client" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/ClientDependency"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPort" eSuperTypes="#//Model/UMLStructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsBehavior" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="False"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsService" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="True"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedPort"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLRealization" eSuperTypes="#//Model/UMLDependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a realization relationship between a specification model element or elements (the supplier) and a model element or elements that implement it (the client). The implementation model element is required to support all of the operations or received signals that the specification model element declares. The implementation model element must make or inherit its own declarations of the operations and signal receptions. The mapping specifies the relationship between the two. The mapping may or may not be computable. Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLRelationship" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A relationship is a connection among model elements.&#xD;&#xA;&#xD;&#xA;In the metamodel, Relationship is a term of convenience without any specific semantics. It is abstract.&#xD;&#xA;&#xD;&#xA;Children of Relationship are Association, Dependency, Flow, and Generalization."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationClass" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association class is an association that is also a class. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not any of the classifiers."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassSide" lowerBound="1"
          eType="#//Model/UMLClass" eOpposite="#//Model/UMLClass/AssociationClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationSide" lowerBound="1"
          eType="#//Model/UMLAssociation" eOpposite="#//Model/UMLAssociation/AssociationClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociation" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association defines a semantic relationship between classifiers. The instances of an association are a set of tuples relating instances of the classifiers. Each tuple value may appear at most once."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Connection" upperBound="-1"
          eType="#//Model/UMLAssociationEnd" containment="true" eOpposite="#//Model/UMLAssociationEnd/Association"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationClass" eType="#//Model/UMLAssociationClass"
          eOpposite="#//Model/UMLAssociationClass/AssociationSide"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationEnd" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association end is an endpoint of an association, which connects the association to a classifier. Each association end is part of one association. The association-ends of each association are ordered."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Qualifier" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/AssociationEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Participant" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/Association"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Association" lowerBound="1"
          eType="#//Model/UMLAssociation" eOpposite="#//Model/UMLAssociation/Connection"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsNavigable" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="True"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Ordering" eType="#//Enumerations/UMLOrderingKind"
          defaultValueLiteral="Ordered"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="AggregationKind" eType="#//Enumerations/UMLAggregationKind"
          defaultValueLiteral="None"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TargetScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Changeability" eType="#//Enumerations/UMLChangeableKind"
          defaultValueLiteral="Changeable"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLGeneralization" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A generalization is a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element (it has all of its properties, members, and relationships) and may contain additional information."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Discriminator" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Child" lowerBound="1"
          eType="#//Model/UMLGeneralizableElement" eOpposite="#//Model/UMLGeneralizableElement/Generalization"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parent" lowerBound="1"
          eType="#//Model/UMLGeneralizableElement" eOpposite="#//Model/UMLGeneralizableElement/Specialization"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Powertype" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/PowertypeGeneralization"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPackage" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A package is a grouping of model elements. In the metamodel Package is a subclass of Namespace and GeneralizableElement. A Package contains ModelElements like Packages, Classifiers, and Associations. A Package may also contain Constraints and Dependencies between ModelElements of the Package."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ElementImportItem" upperBound="-1"
          eType="#//Model/UMLElementImport" containment="true" eOpposite="#//Model/UMLElementImport/Package"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLProject" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Project means top package that always exists. There can be many packages, models and subsystems under the project."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Title" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Author" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Company" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Copyright" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLModel" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A model captures a view of physical system. It is an abstraction of the physical system, with a certain purpose. Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level (for example, an analysis model, a design model, an implementation model)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSubsystem" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsInstantiable" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLElementImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element import defines the visibility and alias of a model element included in the namespace within a package, as a result of the package importing another package. In the metamodel an ElementImport reifies the relationship between a Package and an imported ModelElement. It allows redefinition of the name and the visibility for the imported ModelElement; that is, the ModelElement may be given another name (an alias) and/or a new visibility to be used within the importing Package. The default is no alias (the original name will be used) and private visibility relative to the importing Package."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Package" lowerBound="1"
          eType="#//Model/UMLPackage" eOpposite="#//Model/UMLPackage/ElementImportItem"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Visibility" eType="#//Enumerations/UMLVisibilityKind"
          defaultValueLiteral="Public"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Alias" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSpecification" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ImportedElement" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/ElementImport"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="Enumerations" nsURI="href://pharo.org/XMI" nsPrefix="xmi">
    <eClassifiers xsi:type="ecore:EEnum" name="UMLPseudostateKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel, PseudostateKind defines an enumeration that discriminates the kind of Pseudostate."/>
      </eAnnotations>
      <eLiterals name="Choice"/>
      <eLiterals name="Decision" value="1"/>
      <eLiterals name="DeepHistory" value="2"/>
      <eLiterals name="Initial" value="3"/>
      <eLiterals name="Junction" value="4"/>
      <eLiterals name="ShallowHistory" value="5"/>
      <eLiterals name="Synchronisation" value="6"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLVisibilityKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space."/>
      </eAnnotations>
      <eLiterals name="Package"/>
      <eLiterals name="Private" value="1"/>
      <eLiterals name="Protected" value="2"/>
      <eLiterals name="Public" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLAggregationKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes what kind of aggregation an Association is. When placed on a target end, specifies the relationship of the target end to the source end."/>
      </eAnnotations>
      <eLiterals name="Aggregate"/>
      <eLiterals name="Composite" value="1"/>
      <eLiterals name="None" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLCallConcurrencyKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes the semantics of multiple concurrent calls to the same passive instance; that is, an Instance originating from a Classifier with isActive=false."/>
      </eAnnotations>
      <eLiterals name="Concurrent"/>
      <eLiterals name="Guarded" value="1"/>
      <eLiterals name="Sequential" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLChangeableKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ChangeableKind defines an enumeration that denotes how an AttributeLink or LinkEnd may be modified."/>
      </eAnnotations>
      <eLiterals name="AddOnly"/>
      <eLiterals name="Changeable" value="1"/>
      <eLiterals name="Frozen" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLInteractionOperatorKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Interaction operators"/>
      </eAnnotations>
      <eLiterals name="Alt"/>
      <eLiterals name="Assert" value="1"/>
      <eLiterals name="Break" value="2"/>
      <eLiterals name="Consider" value="3"/>
      <eLiterals name="Ignore" value="4"/>
      <eLiterals name="Loop" value="5"/>
      <eLiterals name="Neg" value="6"/>
      <eLiterals name="Opt" value="7"/>
      <eLiterals name="Par" value="8"/>
      <eLiterals name="Region" value="9"/>
      <eLiterals name="Seq" value="10"/>
      <eLiterals name="Strict" value="11"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLOrderingKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value modify the set. The intent is that the set of enumeration literals be open for new values to be added by tools for purposes of design, code generation, etc. For example, a value of sorted might be used for a design specification."/>
      </eAnnotations>
      <eLiterals name="Ordered"/>
      <eLiterals name="Unordered" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLParameterDirectionKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ParameterDirectionKind defines an enumeration that denotes if a Parameter is used for supplying an argument and/or for returning a value."/>
      </eAnnotations>
      <eLiterals name="In"/>
      <eLiterals name="Inout" value="1"/>
      <eLiterals name="Out" value="2"/>
      <eLiterals name="Return" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLScopeKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier."/>
      </eAnnotations>
      <eLiterals name="Classifier"/>
      <eLiterals name="Instance" value="1"/>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
