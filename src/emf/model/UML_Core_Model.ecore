<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="UML_Core_Model" nsURI="http://pharo.org/UML" nsPrefix="uml">
  <eSubpackages name="Model" nsURI="href://pharo.org/UML" nsPrefix="uml">
    <eClassifiers xsi:type="ecore:EClass" name="UMLElement" eSuperTypes="UML_XMI_Extensions.ecore#//Model/XMIExtensibleModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element is an atomic constituent of a model"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamedElement" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Named elements"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Name" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLModelElement" eSuperTypes="#//Model/UMLNamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A model element is an element that is an abstraction drawn from the system being modeled. Contrast with view element, which is an element whose purpose is to provide a presentation of information for human comprehension.&#xD;&#xA;&#xD;&#xA;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the UML. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.&#xD;&#xA;&#xD;&#xA;Each ModelElement can be regarded as a template. A template has a set of templateParameters that denotes which of the parts of a ModelElement are the template parameters. A ModelElement is a template when there is at least one template parameter. If it is not a template, a ModelElement cannot have template parameters. However, such embedded parameters are not usually complete and need not satisfy well-formedness rules. It is the arguments supplied when the template is instantiated that must be well formed.&#xD;&#xA;&#xD;&#xA;Partially instantiated templates are allowed. This is the case when there are arguments provided for some, but not all templateParameters. A partially instantiated template is still a template, since it still has parameters."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Visibility" eType="#//Enumerations/UMLVisibilityKind"
          defaultValueLiteral="Public"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSpecification" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Comment" upperBound="-1"
          eType="#//Model/UMLComment" eOpposite="#//Model/UMLComment/AnnotatedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParameterOwner" eType="#//Model/UMLTemplateParameter"
          eOpposite="#//Model/UMLTemplateParameter/Parameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" containment="true" eOpposite="#//Model/UMLTemplateParameter/Template"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" eOpposite="#//Model/UMLTemplateParameter/DefaultElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateArgument" eType="#//Model/UMLTemplateArgument"
          eOpposite="#//Model/UMLTemplateArgument/ModelElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Namespace" eType="#//Model/UMLNamespace"
          eOpposite="#//Model/UMLNamespace/OwnedElement"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComment" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A comment is an annotation attached to a model element or a set of model elements. It has no semantic force but may contain information useful to the modeler."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A string that is the comment."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AnnotatedElement" upperBound="-1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/Comment"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateParameter" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the relationship between a template (a ModelElement) and its parameter (a ModelElement). A ModelElement with at least one templateParameter association is a template (by definition)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/ParameterOwner"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ParameterType" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Template" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/TemplateParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultElement" eType="#//Model/UMLModelElement"
          eOpposite="#//Model/UMLModelElement/DefaultParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateArgument" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reifies the relationship between a Binding and one of its arguments (a ModelElement)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ModelElement" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/TemplateArgument"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLGeneralizableElement" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A generalizable element is a model element that may participate in a generalization relationship."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeave" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamespace" eSuperTypes="#//Model/UMLGeneralizableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A namespace is a part of a model that contains a set of ModelElements each of whose names designates a unique element within the namespace.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, like Associations and Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace have additional constraints on which kind of elements may be contained. Namespace is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a package or a class declared inside the scope of another class."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedElement" ordered="false"
          upperBound="-1" eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/Namespace"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClassifier" eSuperTypes="#//Model/UMLNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Classifier is the metamodel superclass of Class, DataType, and Interface. All of these have similar syntax and are therefore all notated using the rectangle symbol with keywords used as necessary. Because classes are most common in diagrams, a rectangle without a keyword represents a class, and the other subclasses of Classifier are indicated with keywords. In the sections that follow, the discussion will focus on Class, but most of the notation applies to the other element kinds as semantically appropriate and as described later under their own sections."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedParameter" upperBound="-1"
          eType="#//Model/UMLParameter" eOpposite="#//Model/UMLParameter/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Operation" eType="#//Model/UMLOperation"
          containment="true" eOpposite="#//Model/UMLOperation/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Attribute" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedFeature" upperBound="-1"
          eType="#//Model/UMLStructuralFeature" eOpposite="#//Model/UMLStructuralFeature/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLFeature" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A feature is a property, like operation or attribute, which is encapsulated within a Classifier."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="OwnerScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLMethod" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A method is the implementation of an operation. It specifies the algorithm or procedure that effects the results of an operation.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Method is a declaration of a named piece of behavior in a Classifier and realizes one (directly) or a set (indirectly) of Operations of the Classifier.&#xD;&#xA;&#xD;&#xA;There may be at most one method for a particular classifier (as owner of the method) and operation (as specification of the method) pairing.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Specification" lowerBound="1"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/Method"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLOperation" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An operation is a service that can be requested from an object to effect behavior. An operation has a signature, which describes the actual parameters that are possible (including possible return values).&#xD;&#xA;&#xD;&#xA;In the metamodel, an Operation is a BehavioralFeature that can be applied to the Instances of the Classifier that contains the Operation."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Concurrency" eType="#//Enumerations/UMLCallConcurrencyKind"
          defaultValueLiteral="Sequential"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeaf" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Specification" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Method" upperBound="-1"
          eType="#//Model/UMLMethod" eOpposite="#//Model/UMLMethod/Specification"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Operation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLParameter" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A parameter is an unbound variable that can be changed, passed, or returned. A parameter may include a name, type, and direction of communication. Parameters are used in the specification of operations, messages and events, templates, etc.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Parameter is a declaration of an argument to be passed to, or returned from, an Operation, a Signal, etc."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DefaultValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DirectionKind" eType="#//Enumerations/UMLParameterDirectionKind"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="BehavioralFeature" eType="#//Model/UMLBehavioralFeature"
          eOpposite="#//Model/UMLBehavioralFeature/Parameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLBehavioralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A behavioral feature refers to a dynamic feature of a model element, such as an operation or method."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsQuery" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" upperBound="-1"
          eType="#//Model/UMLParameter" containment="true" eOpposite="#//Model/UMLParameter/BehavioralFeature"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAttribute" eSuperTypes="#//Model/UMLStructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An attribute is a named slot within a classifier that describes a range of values that instances of the classifier may hold."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="InitialValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Attribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStructuralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A structural feature refers to a static feature of a model element, such as an attribute.&#xD;&#xA;&#xD;&#xA;In the metamodel, a StructuralFeature declares a structural aspect of an Instance of a Classifier, such as an Attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Changeability" eType="#//Enumerations/UMLChangeableKind"
          defaultValueLiteral="Changeable"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TargetScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Ordering" eType="#//Enumerations/UMLOrderingKind"
          defaultValueLiteral="Unordered"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedFeature"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="Enumerations" nsURI="href://pharo.org/XMI" nsPrefix="xmi">
    <eClassifiers xsi:type="ecore:EEnum" name="UMLPseudostateKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel, PseudostateKind defines an enumeration that discriminates the kind of Pseudostate."/>
      </eAnnotations>
      <eLiterals name="Choice"/>
      <eLiterals name="Decision" value="1"/>
      <eLiterals name="DeepHistory" value="2"/>
      <eLiterals name="Initial" value="3"/>
      <eLiterals name="Junction" value="4"/>
      <eLiterals name="ShallowHistory" value="5"/>
      <eLiterals name="Synchronisation" value="6"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLVisibilityKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space."/>
      </eAnnotations>
      <eLiterals name="Package"/>
      <eLiterals name="Private" value="1"/>
      <eLiterals name="Protected" value="2"/>
      <eLiterals name="Public" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLAggregationKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes what kind of aggregation an Association is. When placed on a target end, specifies the relationship of the target end to the source end."/>
      </eAnnotations>
      <eLiterals name="Aggregate"/>
      <eLiterals name="Composite" value="1"/>
      <eLiterals name="None" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLCallConcurrencyKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes the semantics of multiple concurrent calls to the same passive instance; that is, an Instance originating from a Classifier with isActive=false."/>
      </eAnnotations>
      <eLiterals name="Concurrent"/>
      <eLiterals name="Guarded" value="1"/>
      <eLiterals name="Sequential" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLChangeableKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ChangeableKind defines an enumeration that denotes how an AttributeLink or LinkEnd may be modified."/>
      </eAnnotations>
      <eLiterals name="AddOnly"/>
      <eLiterals name="Changeable" value="1"/>
      <eLiterals name="Frozen" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLInteractionOperatorKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Interaction operators"/>
      </eAnnotations>
      <eLiterals name="Alt"/>
      <eLiterals name="Assert" value="1"/>
      <eLiterals name="Break" value="2"/>
      <eLiterals name="Consider" value="3"/>
      <eLiterals name="Ignore" value="4"/>
      <eLiterals name="Loop" value="5"/>
      <eLiterals name="Neg" value="6"/>
      <eLiterals name="Opt" value="7"/>
      <eLiterals name="Par" value="8"/>
      <eLiterals name="Region" value="9"/>
      <eLiterals name="Seq" value="10"/>
      <eLiterals name="Strict" value="11"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLOrderingKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value modify the set. The intent is that the set of enumeration literals be open for new values to be added by tools for purposes of design, code generation, etc. For example, a value of sorted might be used for a design specification."/>
      </eAnnotations>
      <eLiterals name="Ordered"/>
      <eLiterals name="Unordered" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLParameterDirectionKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ParameterDirectionKind defines an enumeration that denotes if a Parameter is used for supplying an argument and/or for returning a value."/>
      </eAnnotations>
      <eLiterals name="In"/>
      <eLiterals name="Inout" value="1"/>
      <eLiterals name="Out" value="2"/>
      <eLiterals name="Return" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLScopeKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier."/>
      </eAnnotations>
      <eLiterals name="Classifier"/>
      <eLiterals name="Instance" value="1"/>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
