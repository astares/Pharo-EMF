<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="UML_Core_Model" nsURI="http://pharo.org/UML" nsPrefix="uml">
  <eSubpackages name="Model" nsURI="href://pharo.org/UML" nsPrefix="uml">
    <eClassifiers xsi:type="ecore:EClass" name="UMLElement" eSuperTypes="UML_XMI_Extensions.ecore#//Model/XMIExtensibleModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element is an atomic constituent of a model"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamedElement" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Named elements"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Name" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLModelElement" eSuperTypes="#//Model/UMLNamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A model element is an element that is an abstraction drawn from the system being modeled. Contrast with view element, which is an element whose purpose is to provide a presentation of information for human comprehension.&#xD;&#xA;&#xD;&#xA;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the UML. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.&#xD;&#xA;&#xD;&#xA;Each ModelElement can be regarded as a template. A template has a set of templateParameters that denotes which of the parts of a ModelElement are the template parameters. A ModelElement is a template when there is at least one template parameter. If it is not a template, a ModelElement cannot have template parameters. However, such embedded parameters are not usually complete and need not satisfy well-formedness rules. It is the arguments supplied when the template is instantiated that must be well formed.&#xD;&#xA;&#xD;&#xA;Partially instantiated templates are allowed. This is the case when there are arguments provided for some, but not all templateParameters. A partially instantiated template is still a template, since it still has parameters."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Visibility" eType="#//Enumerations/UMLVisibilityKind"
          defaultValueLiteral="Public"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSpecification" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Comment" upperBound="-1"
          eType="#//Model/UMLComment" eOpposite="#//Model/UMLComment/AnnotatedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParameterOwner" eType="#//Model/UMLTemplateParameter"
          eOpposite="#//Model/UMLTemplateParameter/Parameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" containment="true" eOpposite="#//Model/UMLTemplateParameter/Template"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultParameter" upperBound="-1"
          eType="#//Model/UMLTemplateParameter" eOpposite="#//Model/UMLTemplateParameter/DefaultElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TemplateArgument" eType="#//Model/UMLTemplateArgument"
          eOpposite="#//Model/UMLTemplateArgument/ModelElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Namespace" eType="#//Model/UMLNamespace"
          eOpposite="#//Model/UMLNamespace/OwnedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Container" eType="#//Model/UMLComponent"
          eOpposite="#//Model/UMLComponent/Resident"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SupplierDependency" upperBound="-1"
          eType="#//Model/UMLDependency" eOpposite="#//Model/UMLDependency/Supplier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClientDependency" upperBound="-1"
          eType="#//Model/UMLDependency" eOpposite="#//Model/UMLDependency/Client"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ElementImport" upperBound="-1"
          eType="#//Model/UMLElementImport" eOpposite="#//Model/UMLElementImport/ImportedElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Behavior" upperBound="-1"
          eType="#//Model/UMLStateMachine" containment="true" eOpposite="#//Model/UMLStateMachine/Context"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ContentRole" upperBound="-1"
          eType="#//Model/UMLClassifierRole" eOpposite="#//Model/UMLClassifierRole/AvailableContent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComment" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A comment is an annotation attached to a model element or a set of model elements. It has no semantic force but may contain information useful to the modeler."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A string that is the comment."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AnnotatedElement" upperBound="-1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/Comment"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateParameter" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the relationship between a template (a ModelElement) and its parameter (a ModelElement). A ModelElement with at least one templateParameter association is a template (by definition)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/ParameterOwner"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ParameterType" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Template" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/TemplateParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DefaultElement" eType="#//Model/UMLModelElement"
          eOpposite="#//Model/UMLModelElement/DefaultParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTemplateArgument" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Reifies the relationship between a Binding and one of its arguments (a ModelElement)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ModelElement" lowerBound="1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/TemplateArgument"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLGeneralizableElement" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A generalizable element is a model element that may participate in a generalization relationship."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeave" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Generalization" upperBound="-1"
          eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Child"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Specialization" upperBound="-1"
          eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Parent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNamespace" eSuperTypes="#//Model/UMLGeneralizableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A namespace is a part of a model that contains a set of ModelElements each of whose names designates a unique element within the namespace.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, like Associations and Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace have additional constraints on which kind of elements may be contained. Namespace is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a package or a class declared inside the scope of another class."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedElement" ordered="false"
          upperBound="-1" eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/Namespace"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClassifier" eSuperTypes="#//Model/UMLNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Classifier is the metamodel superclass of Class, DataType, and Interface. All of these have similar syntax and are therefore all notated using the rectangle symbol with keywords used as necessary. Because classes are most common in diagrams, a rectangle without a keyword represents a class, and the other subclasses of Classifier are indicated with keywords. In the sections that follow, the discussion will focus on Class, but most of the notation applies to the other element kinds as semantically appropriate and as described later under their own sections."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedParameter" upperBound="-1"
          eType="#//Model/UMLParameter" eOpposite="#//Model/UMLParameter/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Operation" eType="#//Model/UMLOperation"
          containment="true" eOpposite="#//Model/UMLOperation/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Attribute" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="TypedFeature" upperBound="-1"
          eType="#//Model/UMLStructuralFeature" eOpposite="#//Model/UMLStructuralFeature/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedPort" upperBound="-1"
          eType="#//Model/UMLPort" eOpposite="#//Model/UMLPort/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedConnector" upperBound="-1"
          eType="#//Model/UMLConnector" containment="true" eOpposite="#//Model/UMLConnector/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Association" upperBound="-1"
          eType="#//Model/UMLAssociationEnd" eOpposite="#//Model/UMLAssociationEnd/Participant"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="PowertypeGeneralization"
          upperBound="-1" eType="#//Model/UMLGeneralization" eOpposite="#//Model/UMLGeneralization/Powertype"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Instance" upperBound="-1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/Classifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CreateAction" upperBound="-1"
          eType="#//Model/UMLCreateAction" eOpposite="#//Model/UMLCreateAction/Instantiation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ObjectFlowState" upperBound="-1"
          eType="#//Model/UMLObjectFlowState" eOpposite="#//Model/UMLObjectFlowState/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassifierInState" upperBound="-1"
          eType="#//Model/UMLClassifierInState" eOpposite="#//Model/UMLClassifierInState/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedCollaboration" upperBound="-1"
          eType="#//Model/UMLCollaboration" containment="true" eOpposite="#//Model/UMLCollaboration/RepresentedClassifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedCollaborationInstanceSet"
          upperBound="-1" eType="#//Model/UMLCollaborationInstanceSet" containment="true"
          eOpposite="#//Model/UMLCollaborationInstanceSet/RepresentedClassifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassifierRole" upperBound="-1"
          eType="#//Model/UMLClassifierRole" eOpposite="#//Model/UMLClassifierRole/Base"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLFeature" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A feature is a property, like operation or attribute, which is encapsulated within a Classifier."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="OwnerScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ConnectorEnd" upperBound="-1"
          eType="#//Model/UMLConnectorEnd" eOpposite="#//Model/UMLConnectorEnd/Role"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassifierRole" eType="#//Model/UMLClassifierRole"
          eOpposite="#//Model/UMLClassifierRole/AvailableFeature"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLMethod" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A method is the implementation of an operation. It specifies the algorithm or procedure that effects the results of an operation.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Method is a declaration of a named piece of behavior in a Classifier and realizes one (directly) or a set (indirectly) of Operations of the Classifier.&#xD;&#xA;&#xD;&#xA;There may be at most one method for a particular classifier (as owner of the method) and operation (as specification of the method) pairing.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Body" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Specification" lowerBound="1"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/Method"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLOperation" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An operation is a service that can be requested from an object to effect behavior. An operation has a signature, which describes the actual parameters that are possible (including possible return values).&#xD;&#xA;&#xD;&#xA;In the metamodel, an Operation is a BehavioralFeature that can be applied to the Instances of the Classifier that contains the Operation."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Concurrency" eType="#//Enumerations/UMLCallConcurrencyKind"
          defaultValueLiteral="Sequential"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeaf" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Specification" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Method" upperBound="-1"
          eType="#//Model/UMLMethod" eOpposite="#//Model/UMLMethod/Specification"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CallAction" upperBound="-1"
          eType="#//Model/UMLCallAction" eOpposite="#//Model/UMLCallAction/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Occurrence" upperBound="-1"
          eType="#//Model/UMLCallEvent" eOpposite="#//Model/UMLCallEvent/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedCollaboration" upperBound="-1"
          eType="#//Model/UMLCollaboration" containment="true" eOpposite="#//Model/UMLCollaboration/RepresentedOperation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedCollaborationInstanceSet"
          upperBound="-1" eType="#//Model/UMLCollaborationInstanceSet" containment="true"
          eOpposite="#//Model/UMLCollaborationInstanceSet/RepresentedOperation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLParameter" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A parameter is an unbound variable that can be changed, passed, or returned. A parameter may include a name, type, and direction of communication. Parameters are used in the specification of operations, messages and events, templates, etc.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Parameter is a declaration of an argument to be passed to, or returned from, an Operation, a Signal, etc."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DefaultValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DirectionKind" eType="#//Enumerations/UMLParameterDirectionKind"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedParameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="BehavioralFeature" eType="#//Model/UMLBehavioralFeature"
          eOpposite="#//Model/UMLBehavioralFeature/Parameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Event" eType="#//Model/UMLEvent"
          eOpposite="#//Model/UMLEvent/Parameter"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="State" upperBound="-1"
          eType="#//Model/UMLObjectFlowState" eOpposite="#//Model/UMLObjectFlowState/Parameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLBehavioralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A behavioral feature refers to a dynamic feature of a model element, such as an operation or method."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsQuery" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" upperBound="-1"
          eType="#//Model/UMLParameter" containment="true" eOpposite="#//Model/UMLParameter/BehavioralFeature"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="RaisedSignal" upperBound="-1"
          eType="#//Model/UMLSignal" eOpposite="#//Model/UMLSignal/Context"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAttribute" eSuperTypes="#//Model/UMLStructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An attribute is a named slot within a classifier that describes a range of values that instances of the classifier may hold."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="InitialValue" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/Attribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationEnd" eType="#//Model/UMLAssociationEnd"
          eOpposite="#//Model/UMLAssociationEnd/Qualifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AttributeLink" upperBound="-1"
          eType="#//Model/UMLAttributeLink" eOpposite="#//Model/UMLAttributeLink/Attribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationEndRole" eType="#//Model/UMLAssociationEndRole"
          eOpposite="#//Model/UMLAssociationEndRole/AvailableQualifier"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStructuralFeature" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A structural feature refers to a static feature of a model element, such as an attribute.&#xD;&#xA;&#xD;&#xA;In the metamodel, a StructuralFeature declares a structural aspect of an Instance of a Classifier, such as an Attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Changeability" eType="#//Enumerations/UMLChangeableKind"
          defaultValueLiteral="Changeable"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TargetScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Ordering" eType="#//Enumerations/UMLOrderingKind"
          defaultValueLiteral="Unordered"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TypeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/TypedFeature"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClass" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsActive" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationClass" eType="#//Model/UMLAssociationClass"
          eOpposite="#//Model/UMLAssociationClass/ClassSide"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInterface" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An interface is a named set of operations that characterize the behavior of an element.&#xD;&#xA;&#xD;&#xA;In the metamodel, an Interface contains a set of Operations that together define a service offered by a Classifier realizing the Interface. A Classifier may offer several services, which means that it may realize several Interfaces, and several Classifiers may realize the same Interface.&#xD;&#xA;&#xD;&#xA;Interfaces are GeneralizableElements.&#xD;&#xA;&#xD;&#xA;Interfaces may not have Attributes, Associations, or Methods. An Interface may participate in an Association provided the Interface cannot see the Association; that is, a Classifier (other than an Interface) may have an Association to an Interface that is navigable from the Classifier but not from the Interface."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDataType" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A data type is a type whose values have no identity; that is, they are pure values. Data types include primitive built-in types (such as integer and string) as well as definable enumeration types (such as the predefined enumeration type boolean whose literals are false and true)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPrimitive" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Primitive defines a predefined DataType, without any relevant UML substructure; that is, it has no UML parts. A primitive datatype may have an algebra and operations defined outside of UML (for example, mathematically). Primitive datatypes used in UML itself include Integer, UnlimitedInteger, and String.&#xD;&#xA;&#xD;&#xA;The run-time instances of a Primitive datatype are DataValues. The values are in manyto-one correspondence to mathemetical elements defined outside of UML (for example, the various integers).&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLEnumeration" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel, Enumeration defines a kind of DataType whose range is a list of predefined values, called enumeration literals.&#xD;&#xA;&#xD;&#xA;Enumeration literals can be copied, stored as values, and passed as arguments. They are ordered within their enumeration datatype. An enumeration literal can be compared for an exact match or to a range within its enumeration datatype. There is no other algebra defined on them (e.g., they cannot be added or subtracted).&#xD;&#xA;&#xD;&#xA;The run-time instances of a Primitive datatype are Values. Each such value corresponds to exactly one EnumerationLiteral defined as part of the Enumeration type itself. An Enumeration may have operations, but they must be pure functions (this is the rule for all DataType elements)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Literal" lowerBound="1"
          upperBound="-1" eType="#//Model/UMLEnumerationLiteral" containment="true"
          eOpposite="#//Model/UMLEnumerationLiteral/Enumeration"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLArtifact" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An Artifact represents a physical piece of information that is used or produced by a software development process. Examples of Artifacts include models, source files, scripts, and binary executable files. An Artifact may constitute the implementation of a deployable component."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeploymentLocation" lowerBound="1"
          eType="#//Model/UMLNode" eOpposite="#//Model/UMLNode/DeployedArtifact"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ImplementationLocation"
          upperBound="-1" eType="#//Model/UMLComponent" eOpposite="#//Model/UMLComponent/Implementation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNode" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A node is a run-time physical object that represents a computational resource, generally having at least a memory and often processing capability as well, and upon which components may be deployed.&#xD;&#xA;&#xD;&#xA;In the metamodel, a Node is a subclass of Classifier. It is associated with a set of Components that are deployed on the Node."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeployedArtifact" upperBound="-1"
          eType="#//Model/UMLArtifact" eOpposite="#//Model/UMLArtifact/DeploymentLocation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeployedComponent" upperBound="-1"
          eType="#//Model/UMLComponent" eOpposite="#//Model/UMLComponent/DeploymentLocation"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComponent" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A component represents a modular, deployable, and replaceable part of a system that encapsulates implementation and exposes a set of interfaces."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Resident" upperBound="-1"
          eType="#//Model/UMLModelElement" containment="true" eOpposite="#//Model/UMLModelElement/Container"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Implementation" upperBound="-1"
          eType="#//Model/UMLArtifact" eOpposite="#//Model/UMLArtifact/ImplementationLocation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeploymentLocation" upperBound="-1"
          eType="#//Model/UMLNode" eOpposite="#//Model/UMLNode/DeployedComponent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLProgrammingLanguageDataType" eSuperTypes="#//Model/UMLDataType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A data type is a type whose values have no identity (i.e., they are pure values). A programming language data type is a data type specified according to the semantics of a particular programming language, using constructs available in that language. There are a wide variety of programming languages and many of them include type constructs not included as UML classifiers. In some cases, it is important to represent those constructs such that their exact form in the programming language is available. The ProgrammingLanguageData type captures such programming language types in a language-dependent fashion. They are represented by the name of the language and a string characterizing them, subject to interpretation by the particular language. Because they are dependent on particular languages, they are not portable among languages (except by agreement among the languages) and they do not map into other UML classifiers. Their semantics is therefore opaque within UML except by special interpretation by a profile intended for the particular language.&#xD;&#xA;&#xD;&#xA;Note that many or most programming language types can be directly represented using other UML classifiers, and such representation makes available deeper semantic analysis.&#xD;&#xA;&#xD;&#xA;A ProgrammingLanguageDataType may omit its name. Two ProgrammingLanguageDataType elements without names are not considered equivalent."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Expression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLEnumerationLiteral" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An EnumerationLiteral defines an element of the run-time extension of an Enumeration data type. It has no relevant substructure, that is, it is atomic. The enumeration literals of a particular Enumeration datatype are ordered."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Enumeration" lowerBound="1"
          eType="#//Model/UMLEnumeration" eOpposite="#//Model/UMLEnumeration/Literal"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLConnectorEnd" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Role" lowerBound="1"
          eType="#//Model/UMLFeature" eOpposite="#//Model/UMLFeature/ConnectorEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Connnector" lowerBound="1"
          eType="#//Model/UMLConnector" eOpposite="#//Model/UMLConnector/End"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLConnector" eSuperTypes="#//Model/UMLFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="End" upperBound="-1"
          eType="#//Model/UMLConnectorEnd" containment="true" eOpposite="#//Model/UMLConnectorEnd/Connnector"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedConnector"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDependency" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A term of convenience for a Relationship other than Association, Generalization, Flow, or metarelationship (such as the relationship between a Classifier and one of its Instances)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Supplier" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/SupplierDependency"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Client" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/ClientDependency"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPort" eSuperTypes="#//Model/UMLStructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsBehavior" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="False"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsService" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="True"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedPort"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLRealization" eSuperTypes="#//Model/UMLDependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a realization relationship between a specification model element or elements (the supplier) and a model element or elements that implement it (the client). The implementation model element is required to support all of the operations or received signals that the specification model element declares. The implementation model element must make or inherit its own declarations of the operations and signal receptions. The mapping specifies the relationship between the two. The mapping may or may not be computable. Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLRelationship" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A relationship is a connection among model elements.&#xD;&#xA;&#xD;&#xA;In the metamodel, Relationship is a term of convenience without any specific semantics. It is abstract.&#xD;&#xA;&#xD;&#xA;Children of Relationship are Association, Dependency, Flow, and Generalization."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationClass" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association class is an association that is also a class. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not any of the classifiers."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassSide" lowerBound="1"
          eType="#//Model/UMLClass" eOpposite="#//Model/UMLClass/AssociationClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationSide" lowerBound="1"
          eType="#//Model/UMLAssociation" eOpposite="#//Model/UMLAssociation/AssociationClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociation" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association defines a semantic relationship between classifiers. The instances of an association are a set of tuples relating instances of the classifiers. Each tuple value may appear at most once."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Connection" upperBound="-1"
          eType="#//Model/UMLAssociationEnd" containment="true" eOpposite="#//Model/UMLAssociationEnd/Association"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationClass" eType="#//Model/UMLAssociationClass"
          eOpposite="#//Model/UMLAssociationClass/AssociationSide"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Link" upperBound="-1"
          eType="#//Model/UMLLink" eOpposite="#//Model/UMLLink/Association"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationRole" upperBound="-1"
          eType="#//Model/UMLAssociationRole" eOpposite="#//Model/UMLAssociationRole/Base"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationEnd" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association end is an endpoint of an association, which connects the association to a classifier. Each association end is part of one association. The association-ends of each association are ordered."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Qualifier" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/AssociationEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Participant" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/Association"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Association" lowerBound="1"
          eType="#//Model/UMLAssociation" eOpposite="#//Model/UMLAssociation/Connection"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsNavigable" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"
          defaultValueLiteral="True"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Ordering" eType="#//Enumerations/UMLOrderingKind"
          defaultValueLiteral="Ordered"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="AggregationKind" eType="#//Enumerations/UMLAggregationKind"
          defaultValueLiteral="None"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="TargetScope" eType="#//Enumerations/UMLScopeKind"
          defaultValueLiteral="Instance"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Changeability" eType="#//Enumerations/UMLChangeableKind"
          defaultValueLiteral="Changeable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="LinkEnd" upperBound="-1"
          eType="#//Model/UMLLinkEnd" eOpposite="#//Model/UMLLinkEnd/AssociationEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationEndRole" upperBound="-1"
          eType="#//Model/UMLAssociationEndRole" eOpposite="#//Model/UMLAssociationEndRole/Base"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLGeneralization" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A generalization is a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element (it has all of its properties, members, and relationships) and may contain additional information."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Discriminator" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Child" lowerBound="1"
          eType="#//Model/UMLGeneralizableElement" eOpposite="#//Model/UMLGeneralizableElement/Generalization"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parent" lowerBound="1"
          eType="#//Model/UMLGeneralizableElement" eOpposite="#//Model/UMLGeneralizableElement/Specialization"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Powertype" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/PowertypeGeneralization"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPackage" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A package is a grouping of model elements. In the metamodel Package is a subclass of Namespace and GeneralizableElement. A Package contains ModelElements like Packages, Classifiers, and Associations. A Package may also contain Constraints and Dependencies between ModelElements of the Package."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ElementImportItem" upperBound="-1"
          eType="#//Model/UMLElementImport" containment="true" eOpposite="#//Model/UMLElementImport/Package"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLProject" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Project means top package that always exists. There can be many packages, models and subsystems under the project."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Title" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Author" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Company" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Copyright" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLModel" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A model captures a view of physical system. It is an abstraction of the physical system, with a certain purpose. Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level (for example, an analysis model, a design model, an implementation model)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSubsystem" eSuperTypes="#//Model/UMLPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsInstantiable" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLElementImport" eSuperTypes="#//Model/UMLElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element import defines the visibility and alias of a model element included in the namespace within a package, as a result of the package importing another package. In the metamodel an ElementImport reifies the relationship between a Package and an imported ModelElement. It allows redefinition of the name and the visibility for the imported ModelElement; that is, the ModelElement may be given another name (an alias) and/or a new visibility to be used within the importing Package. The default is no alias (the original name will be used) and private visibility relative to the importing Package."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Package" lowerBound="1"
          eType="#//Model/UMLPackage" eOpposite="#//Model/UMLPackage/ElementImportItem"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Visibility" eType="#//Enumerations/UMLVisibilityKind"
          defaultValueLiteral="Public"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Alias" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSpecification" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ImportedElement" lowerBound="1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/ElementImport"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInstance" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The instance construct defines an entity to which a set of operations can be applied and which has a state that stores the effects of the operations."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsMultiInstance" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Slot" upperBound="-1"
          eType="#//Model/UMLAttributeLink" containment="true" eOpposite="#//Model/UMLAttributeLink/Instance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SendingStimulus" upperBound="-1"
          eType="#//Model/UMLStimulus" eOpposite="#//Model/UMLStimulus/Sender"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ReceivingStimulus" upperBound="-1"
          eType="#//Model/UMLStimulus" eOpposite="#//Model/UMLStimulus/Receiver"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedInstance" upperBound="-1"
          eType="#//Model/UMLInstance" containment="true" eOpposite="#//Model/UMLInstance/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLInstance"
          eOpposite="#//Model/UMLInstance/OwnedInstance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AttributeLink" upperBound="-1"
          eType="#//Model/UMLAttributeLink" eOpposite="#//Model/UMLAttributeLink/Value"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Classifier" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/Instance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ComponentInstance" eType="#//Model/UMLComponentInstance"
          eOpposite="#//Model/UMLComponentInstance/Resident"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="OwnedLink" upperBound="-1"
          eType="#//Model/UMLLink" containment="true" eOpposite="#//Model/UMLLink/Owner"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="PlayedRole" upperBound="-1"
          eType="#//Model/UMLClassifierRole" eOpposite="#//Model/UMLClassifierRole/ConformingInstance"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CollaborationInstanceSet"
          eType="#//Model/UMLCollaborationInstanceSet" eOpposite="#//Model/UMLCollaborationInstanceSet/ParticipatingInstance"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLUseCaseInstance" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A use case instance is the performance of a sequence of actions specified in a use case. In the metamodel UseCaseInstance is a subclass of Instance. Each method performed by a UseCaseInstance is performed as an atomic transaction; that is, it is not interrupted by any other UseCaseInstance. An explicitly described UseCaseInstance is called a scenario."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStimulus" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A stimulus reifies a communication between two instances."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Arguments" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Return" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Iteration" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Branch" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Action" lowerBound="1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/Stimulus"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Activatee" upperBound="-1"
          eType="#//Model/UMLStimulus" eOpposite="#//Model/UMLStimulus/Activator"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Activator" eType="#//Model/UMLStimulus"
          eOpposite="#//Model/UMLStimulus/Activatee"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Sender" lowerBound="1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/SendingStimulus"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Receiver" lowerBound="1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/ReceivingStimulus"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Successor" eType="#//Model/UMLStimulus"
          eOpposite="#//Model/UMLStimulus/Predecessor"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Predecessor" eType="#//Model/UMLStimulus"
          eOpposite="#//Model/UMLStimulus/Successor"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CommunicationLink" eType="#//Model/UMLLink"
          eOpposite="#//Model/UMLLink/Stimulus"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="InteractionInstanceSet"
          eType="#//Model/UMLInteractionInstanceSet" eOpposite="#//Model/UMLInteractionInstanceSet/ParticipatingStimulus"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="PlayedRole" upperBound="-1"
          eType="#//Model/UMLMessage" eOpposite="#//Model/UMLMessage/ConformingStimulus"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAction" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An action is a specification of an executable statement that forms an abstraction of a computational procedure that results in a change in the state of the model, and can be realized by sending a message to an object or modifying a link or a value of an attribute."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Stimulus" eType="#//Model/UMLStimulus"
          eOpposite="#//Model/UMLStimulus/Action"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Recurrence" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Target" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAsynchronous" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Script" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ActualArgument" upperBound="-1"
          eType="#//Model/UMLArgument" containment="true" eOpposite="#//Model/UMLArgument/Action"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ActionSequence" eType="#//Model/UMLActionSequence"
          eOpposite="#//Model/UMLActionSequence/Action"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Transition" eType="#//Model/UMLTransition"
          eOpposite="#//Model/UMLTransition/Effect"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="EntryState" eType="#//Model/UMLState"
          eOpposite="#//Model/UMLState/EntryAction"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ExitState" eType="#//Model/UMLState"
          eOpposite="#//Model/UMLState/ExitAction"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DoActivityState" eType="#//Model/UMLState"
          eOpposite="#//Model/UMLState/DoActivity"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Message" eType="#//Model/UMLMessage"
          eOpposite="#//Model/UMLMessage/Action"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAttributeLink" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An attribute link is a named slot in an instance, which holds the value of an attribute."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ValueExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Attribute" lowerBound="1"
          eType="#//Model/UMLAttribute" eOpposite="#//Model/UMLAttribute/AttributeLink"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Instance" eType="#//Model/UMLInstance"
          eOpposite="#//Model/UMLInstance/Slot"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Value" lowerBound="1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/AttributeLink"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="LinkEnd" eType="#//Model/UMLLinkEnd"
          eOpposite="#//Model/UMLLinkEnd/QualifiedValue"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLComponentInstance" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A component instance is an instance of a component that resides on a node instance. A component instance may have a state."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="NodeInstance" eType="#//Model/UMLNodeInstance"
          eOpposite="#//Model/UMLNodeInstance/Resident"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Resident" upperBound="-1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/ComponentInstance"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDataValue" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A data value is an instance with no identity."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSubsystemInstance" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subsystem instance is an instance of a subsystem. It is the runtime representation of a subsystem, hence it can be connected to links corresponding to associations of the subsystem. Its task is to handle incoming communication by re-directing stimuli to the appropriate receiver inside the subsystem."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLObject" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An object is an instance that originates from a class."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="LinkObject" lowerBound="1"
          eType="#//Model/UMLLinkObject" eOpposite="#//Model/UMLLinkObject/ObjectSide"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLNodeInstance" eSuperTypes="#//Model/UMLInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A node instance is an instance of a node. A collection of component instances may reside on the node instance."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Resident" upperBound="-1"
          eType="#//Model/UMLComponentInstance" eOpposite="#//Model/UMLComponentInstance/NodeInstance"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLArgument" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An argument is an expression describing how to determine the actual values passed in a dispatched request."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Value" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Action" eType="#//Model/UMLAction"
          eOpposite="#//Model/UMLAction/ActualArgument"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLActionSequence" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An action sequence is a collection of actions."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Action" upperBound="-1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/ActionSequence"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCreateAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A create action is an action resulting in the creation of an instance of some classifier."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Instantiation" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/CreateAction"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCallAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A call action is an action resulting in an invocation of an operation on an instance. A call action can be synchronous or asynchronous, indicating whether the operation is invoked synchronously or asynchronously."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Operation" lowerBound="1"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/CallAction"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLReturnAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A return action is an action that results in returning a value to a caller."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSendAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A send action is an action that results in the (asynchronous) sending of a signal. The signal can be directed to a set of receivers via an objectSetExpression, or sent implicitly to an unspecified set of receivers, defined by some external mechanism. For example, if the signal is an exception, the receiver is determined by the underlying runtime system mechanisms."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Signal" lowerBound="1"
          eType="#//Model/UMLSignal" eOpposite="#//Model/UMLSignal/SendAction"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTerminateAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A terminate action results in self-destruction of an object."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLUninterpretedAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An uninterpreted action represents an action that is not explicitly reified in the UML."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLDestroyAction" eSuperTypes="#//Model/UMLAction">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A destroy action is an action that results in the destruction of an object specified in the action."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSignal" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A signal is a specification of an asynchronous stimulus communicated between instances. The receiving instance handles the signal by a state machine. Signal is a generalizable element and is defined independently of the classes handling the signal. A reception is a declaration that a class handles a signal, but the actual handling is specified by a state machine"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SendAction" upperBound="-1"
          eType="#//Model/UMLSendAction" eOpposite="#//Model/UMLSendAction/Signal"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Context" upperBound="-1"
          eType="#//Model/UMLBehavioralFeature" eOpposite="#//Model/UMLBehavioralFeature/RaisedSignal"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Reception" upperBound="-1"
          eType="#//Model/UMLReception" eOpposite="#//Model/UMLReception/Signal"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Occurance" upperBound="-1"
          eType="#//Model/UMLSignalEvent" eOpposite="#//Model/UMLSignalEvent/Signal"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLLink" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The link construct is a connection between instances."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Owner" eType="#//Model/UMLInstance"
          eOpposite="#//Model/UMLInstance/OwnedLink"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Association" lowerBound="1"
          eType="#//Model/UMLAssociation" eOpposite="#//Model/UMLAssociation/Link"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Connection" upperBound="-1"
          eType="#//Model/UMLLinkEnd" containment="true" eOpposite="#//Model/UMLLinkEnd/Link"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Stimulus" upperBound="-1"
          eType="#//Model/UMLStimulus" eOpposite="#//Model/UMLStimulus/CommunicationLink"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="PlayedRole" upperBound="-1"
          eType="#//Model/UMLAssociationRole" eOpposite="#//Model/UMLAssociationRole/ConfirmingLink"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CollaborationInstanceSet"
          eType="#//Model/UMLCollaborationInstanceSet" eOpposite="#//Model/UMLCollaborationInstanceSet/ParticipatingLink"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLLinkEnd" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A link end is an end point of a link. In the metamodel LinkEnd is the part of a Link that connects to an Instance. It corresponds to an AssociationEnd of the Link’s Association."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Link" lowerBound="1"
          eType="#//Model/UMLLink" eOpposite="#//Model/UMLLink/Connection"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AssociationEnd" lowerBound="1"
          eType="#//Model/UMLAssociationEnd" eOpposite="#//Model/UMLAssociationEnd/LinkEnd"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="QualifiedValue" upperBound="-1"
          eType="#//Model/UMLAttributeLink" containment="true" eOpposite="#//Model/UMLAttributeLink/LinkEnd"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLLinkObject" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A link object is a link with its own set of attribute values and to which a set of operations may be applied."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ObjectSide" lowerBound="1"
          eType="#//Model/UMLObject" eOpposite="#//Model/UMLObject/LinkObject"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLException" eSuperTypes="#//Model/UMLSignal">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An exception is a signal raised by behavioral features typically in case of execution faults. "/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLReception" eSuperTypes="#//Model/UMLBehavioralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. The reception designates a signal and specifies the expected behavioral response. A reception is a summary of expected behavior. The details of handling a signal are specified by a state machine."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Specification" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsRoot" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsLeaf" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsAbstract" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Signal" lowerBound="1"
          eType="#//Model/UMLSignal" eOpposite="#//Model/UMLSignal/Reception"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLUseCase" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The use case construct is used to define the behavior of a system or other semantic entity without revealing the entity's internal structure. Each use case specifies a sequence of actions, including variants, that the entity can perform, interacting with actors of the entity."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ExtensionPoint" upperBound="-1"
          eType="#//Model/UMLExtensionPoint" containment="true" eOpposite="#//Model/UMLExtensionPoint/UseCase"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Includer" upperBound="-1"
          eType="#//Model/UMLInclude" eOpposite="#//Model/UMLInclude/Addition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Include" upperBound="-1"
          eType="#//Model/UMLInclude" eOpposite="#//Model/UMLInclude/Base"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Extender" upperBound="-1"
          eType="#//Model/UMLExtend" eOpposite="#//Model/UMLExtend/Base"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Extend" upperBound="-1"
          eType="#//Model/UMLExtend" eOpposite="#//Model/UMLExtend/Extension"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLActor" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An actor defines a coherent set of roles that users of an entity can play when interacting with the entity. An actor may be considered to play a separate role with regard to each use case with which it communicates."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLExtensionPoint" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An extension point references one or a collection of locations in a use case where the use case may be extended. In the metamodel an ExtensionPoint has a name and one or a collection of descriptions of locations in the behavior of the owning use case, where a piece of behavior may be inserted into the owning use case."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="UseCase" lowerBound="1"
          eType="#//Model/UMLUseCase" eOpposite="#//Model/UMLUseCase/ExtensionPoint"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Extend" upperBound="-1"
          eType="#//Model/UMLExtend" eOpposite="#//Model/UMLExtend/ExtensionPoint"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInclude" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An include relationship defines that a use case contains the behavior defined in another use case"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Addition" lowerBound="1"
          eType="#//Model/UMLUseCase" eOpposite="#//Model/UMLUseCase/Includer"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Base" lowerBound="1"
          eType="#//Model/UMLUseCase" eOpposite="#//Model/UMLUseCase/Include"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLExtend" eSuperTypes="#//Model/UMLRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An extend relationship defines that instances of a use case may be augmented with some additional behavior defined in an extending use case."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Condition" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ExtensionPoint" lowerBound="1"
          upperBound="-1" eType="#//Model/UMLExtensionPoint" eOpposite="#//Model/UMLExtensionPoint/Extend"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Base" lowerBound="1"
          eType="#//Model/UMLUseCase" eOpposite="#//Model/UMLUseCase/Extender"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Extension" lowerBound="1"
          eType="#//Model/UMLUseCase" eOpposite="#//Model/UMLUseCase/Extend"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLEvent" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An event is a specification of a type of observable occurrence. The occurrence that generates an event instance is assumed to take place at an instant in time with no duration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" upperBound="-1"
          eType="#//Model/UMLParameter" containment="true" eOpposite="#//Model/UMLParameter/Event"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Transition" eType="#//Model/UMLTransition"
          eOpposite="#//Model/UMLTransition/Trigger"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="State" upperBound="-1"
          eType="#//Model/UMLState" eOpposite="#//Model/UMLState/DeferrableEvent"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSignalEvent" eSuperTypes="#//Model/UMLEvent">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A signal event represents the reception of a particular (asynchronous) signal."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Signal" lowerBound="1"
          eType="#//Model/UMLSignal" eOpposite="#//Model/UMLSignal/Occurance"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCallEvent" eSuperTypes="#//Model/UMLEvent">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A call event represents the reception of a request to synchronously invoke a specific operation."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Operation" lowerBound="1"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/Occurrence"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTimeEvent" eSuperTypes="#//Model/UMLEvent">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A TimeEvent models the expiration of a specific deadline."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="When" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLChangeEvent" eSuperTypes="#//Model/UMLEvent">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A change event models an event that occurs when an explicit boolean expression becomes true as a result of a change in value of one or more attributes or associations."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ChangeExpression" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStateMachine" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A state machine is a specification that describes all possible behaviors of some dynamic model element. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of event instances."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Top" lowerBound="1" eType="#//Model/UMLState"
          containment="true" eOpposite="#//Model/UMLState/StateMachine"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Transition" upperBound="-1"
          eType="#//Model/UMLTransition" containment="true" eOpposite="#//Model/UMLTransition/StateMachine"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Context" eType="#//Model/UMLModelElement"
          eOpposite="#//Model/UMLModelElement/Behavior"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SubmachineState" eType="#//Model/UMLSubmachineState"
          eOpposite="#//Model/UMLSubmachineState/Submachine"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStateVertex" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A StateVertex is an abstraction of a node in a statechart graph. In general, it can be the source or destination of any number of transitions."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Outgoing" upperBound="-1"
          eType="#//Model/UMLTransition" eOpposite="#//Model/UMLTransition/Source"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Incoming" upperBound="-1"
          eType="#//Model/UMLTransition" eOpposite="#//Model/UMLTransition/Target"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ContainerState" eType="#//Model/UMLCompositeState"
          eOpposite="#//Model/UMLCompositeState/Subvertex"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLTransition" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A transition is a directed relationship between a source state vertex and a target state vertex."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="GuardCondition" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="State" eType="#//Model/UMLState"
          eOpposite="#//Model/UMLState/InternalTransition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Effect" upperBound="-1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/Transition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Trigger" upperBound="-1"
          eType="#//Model/UMLEvent" containment="true" eOpposite="#//Model/UMLEvent/Transition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="StateMachine" eType="#//Model/UMLStateMachine"
          eOpposite="#//Model/UMLStateMachine/Transition"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Source" lowerBound="1"
          eType="#//Model/UMLStateVertex" eOpposite="#//Model/UMLStateVertex/Outgoing"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Target" lowerBound="1"
          eType="#//Model/UMLStateVertex" eOpposite="#//Model/UMLStateVertex/Incoming"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPseudostate" eSuperTypes="#//Model/UMLStateVertex">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph. They are used, typically, to connect multiple transitions into more complex state transitions paths."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="PseudostateKind" eType="#//Enumerations/UMLPseudostateKind"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSynchState" eSuperTypes="#//Model/UMLStateVertex">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A synch state is a vertex used for synchronizing the concurrent regions of a statemachine. It is different from a state in the sense that it is not mapped to a boolean value (active, not active), but an integer. A synch state is used in conjunction with forks and joins to insure that one region leaves a particular state or states before another region can enter a particular state or states."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Bound" eType="ecore:EDataType PharoUML.ecore#//Pharo/Integer"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLStubState" eSuperTypes="#//Model/UMLStateVertex">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A stub state can appear within a submachine state and represents an actual subvertex contained within the referenced state machine. It can serve as a source or destination of transitions that connect a state vertex in the containing state machine with a subvertex in the referenced state machine."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="ReferenceState" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLState" eSuperTypes="#//Model/UMLStateVertex">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A state is an abstract metaclass that models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. However, it can also model dynamic conditions such as the process of performing some activity; that is, the model element under consideration enters the state when the activity commences and leaves it as soon as the activity is completed."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="StateMachine" eType="#//Model/UMLStateMachine"
          eOpposite="#//Model/UMLStateMachine/Top"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="InternalTransition" upperBound="-1"
          eType="#//Model/UMLTransition" containment="true" eOpposite="#//Model/UMLTransition/State"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="EntryAction" upperBound="-1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/EntryState"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ExitAction" upperBound="-1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/ExitState"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DoActivity" upperBound="-1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/DoActivityState"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="DeferrableEvent" upperBound="-1"
          eType="#//Model/UMLEvent" eOpposite="#//Model/UMLEvent/State"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ClassifierState" upperBound="-1"
          eType="#//Model/UMLClassifierInState" eOpposite="#//Model/UMLClassifierInState/InState"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCompositeState" eSuperTypes="#//Model/UMLState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A composite state is a state that contains other state vertices (states, pseudostates, etc.)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsConcurrent" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Subvertex" upperBound="-1"
          eType="#//Model/UMLStateVertex" containment="true" eOpposite="#//Model/UMLStateVertex/ContainerState"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSimpleState" eSuperTypes="#//Model/UMLState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A SimpleState is a state that does not have substates."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLFinalState" eSuperTypes="#//Model/UMLState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A special kind of state signifying that the enclosing composite state is completed. If the enclosing state is the top state, then it means that the entire state machine has completed. There can be one or more final states in a state machine."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLFlowFinalState" eSuperTypes="#//Model/UMLFinalState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A flow final state is a final state that terminates a flow."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSubmachineState" eSuperTypes="#//Model/UMLCompositeState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A submachine state is a state that executes a nested state machine. When an input transition to the submachine state is triggered, execution begins with the nested state machine. The outgoing transitions of a submachine state are enabled when the final state of the nested state machine is reached."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Submachine" lowerBound="1"
          eType="#//Model/UMLStateMachine" eOpposite="#//Model/UMLStateMachine/SubmachineState"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLPartition" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A partition is a mechanism for dividing the states of an activity graph into groups. Partitions often correspond to organizational units in a business model. They may be used to allocate characteristics or resources among the states of an activity graph."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLActivityGraph" eSuperTypes="#//Model/UMLStateMachine">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An activity graph is a special case of a state machine that defines a computational process in terms of the control-flow and object-flow among its constituent actions. The primary purpose of activity graphs is to describe the states of an activity or process involving one or more classifiers."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLActionState" eSuperTypes="#//Model/UMLSimpleState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An action state represents the execution of an atomic action, typically the invocation of an operation. An action state is a simple state with an entry action whose only exit transition is triggered by the implicit event of completing the execution of the entry action."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsDynamic" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DynamicArguments" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DynamicMultiplicity"
          eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSignalSendState" eSuperTypes="#//Model/UMLActionState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A signal send state is a state with no actions or internal transitions. Its specified action maps to a effect on the incoming transition between it and the previous state."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSubactivityState" eSuperTypes="#//Model/UMLSubmachineState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subactivity state is a submachine state that executes a nested activity graph. When an input transition to the subactivity state is triggered, execution begins with the nested activity graph. The outgoing transitions of a subactivity state are enabled when the final state of the nested activity graph is reached; that is, when it completes its execution, or when the trigger events occur on the transitions."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsDynamic" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DynamicArguments" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="DynamicMultiplicity"
          eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLSignalAcceptState" eSuperTypes="#//Model/UMLActionState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A signal accept state is a state with no actions or internal transitions. Its specified event maps to trigger event on the outgoing transition between it and follwing state"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCallState" eSuperTypes="#//Model/UMLActionState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A call state is an action state that has exactly one call action as its entry action. It is useful in object flow modeling to reduce notational ambiguity over which action is taking input or providing output."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLObjectFlowState" eSuperTypes="#//Model/UMLSimpleState">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An object flow state defines an object flow between actions in an activity graph. An instance of a particular classifier, possibly in a particular state, is available when an object flow state is ccupied. The generation of an object by an action in an action state may be modeled by an object flow state that is triggered by the completion of the action state. The use of the object in a subsequent action state may be modeled by connecting the output transition of the object flow state as an input transition to the action state. Generally each action places the object in a different state that is modeled as a distinct object flow state."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="IsSynch" eType="ecore:EDataType PharoUML.ecore#//Pharo/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Parameter" upperBound="-1"
          eType="#//Model/UMLParameter" eOpposite="#//Model/UMLParameter/State"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" lowerBound="1"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/ObjectFlowState"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClassifierInState" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A classifier-in-state characterizes instances of a given classifier that are in a particular state or states. In an activity graph, it may be used to specify input and/or output to an action through an object flow state. ClassifierInState is a child of Classifier and may be used in static structural models and collaborations. For example, it can be used to show associations that are only relevant when objects of a class are in a given state."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Type" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/ClassifierInState"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="InState" lowerBound="1"
          upperBound="-1" eType="#//Model/UMLState" eOpposite="#//Model/UMLState/ClassifierState"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLClassifierRole" eSuperTypes="#//Model/UMLClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A classifier role is a specific role played by a participant in a collaboration. It specifies a restricted view of a classifier, defined by what is required in the collaboration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ConformingInstance" upperBound="-1"
          eType="#//Model/UMLInstance" eOpposite="#//Model/UMLInstance/PlayedRole"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="SenderClientMessage"
          upperBound="-1" eType="#//Model/UMLMessage" eOpposite="#//Model/UMLMessage/Sender"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ReceiverClientMessage"
          upperBound="-1" eType="#//Model/UMLMessage" eOpposite="#//Model/UMLMessage/Receiver"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AvailableContent" upperBound="-1"
          eType="#//Model/UMLModelElement" eOpposite="#//Model/UMLModelElement/ContentRole"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AvailableFeature" upperBound="-1"
          eType="#//Model/UMLFeature" containment="true" eOpposite="#//Model/UMLFeature/ClassifierRole"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Base" eType="#//Model/UMLClassifier"
          eOpposite="#//Model/UMLClassifier/ClassifierRole"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLMessage" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A message defines a particular communication between instances that is specified in an interaction."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ConformingStimulus" upperBound="-1"
          eType="#//Model/UMLStimulus" eOpposite="#//Model/UMLStimulus/PlayedRole"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Interaction" eType="#//Model/UMLInteraction"
          eOpposite="#//Model/UMLInteraction/Message"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Action" lowerBound="1"
          eType="#//Model/UMLAction" containment="true" eOpposite="#//Model/UMLAction/Message"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Arguments" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Return" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Iteration" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Branch" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Predecessor" eType="#//Model/UMLMessage"
          eOpposite="#//Model/UMLMessage/Successor"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Successor" eType="#//Model/UMLMessage"
          eOpposite="#//Model/UMLMessage/Predecessor"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Activatee" upperBound="-1"
          eType="#//Model/UMLMessage" eOpposite="#//Model/UMLMessage/Activator"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Activator" eType="#//Model/UMLMessage"
          eOpposite="#//Model/UMLMessage/Activatee"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CommunicationConnection"
          eType="#//Model/UMLAssociationRole" eOpposite="#//Model/UMLAssociationRole/Message"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Sender" lowerBound="1"
          eType="#//Model/UMLClassifierRole" eOpposite="#//Model/UMLClassifierRole/SenderClientMessage"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Receiver" lowerBound="1"
          eType="#//Model/UMLClassifierRole" eOpposite="#//Model/UMLClassifierRole/ReceiverClientMessage"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInteraction" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An interaction specifies the communication between instances performing a specific task. Each interaction is defined in the context of a collaboration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="InteractionInstanceSet"
          upperBound="-1" eType="#//Model/UMLInteractionInstanceSet" eOpposite="#//Model/UMLInteractionInstanceSet/Interaction"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Context" lowerBound="1"
          eType="#//Model/UMLCollaboration" eOpposite="#//Model/UMLCollaboration/Interaction"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Message" lowerBound="1"
          upperBound="-1" eType="#//Model/UMLMessage" containment="true" eOpposite="#//Model/UMLMessage/Interaction"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCollaboration" eSuperTypes="#//Model/UMLNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collaboration describes how an operation or a classifier, like a use case, is realized by a set of classifiers and associations used in a specific way. The collaboration defines a set of roles to be played by instances and links, as well as a set of interactions that define the communication between the instances when they play the roles."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="CollaborationInstanceSet"
          upperBound="-1" eType="#//Model/UMLCollaborationInstanceSet" eOpposite="#//Model/UMLCollaborationInstanceSet/Collaboration"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Interaction" upperBound="-1"
          eType="#//Model/UMLInteraction" containment="true" eOpposite="#//Model/UMLInteraction/Context"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="UsedCollaboration" eType="#//Model/UMLCollaboration"
          eOpposite="#//Model/UMLCollaboration/UserCollaboration"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="UserCollaboration" eType="#//Model/UMLCollaboration"
          eOpposite="#//Model/UMLCollaboration/UsedCollaboration"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="RepresentedClassifier"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedCollaboration"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="RepresentedOperation"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/OwnedCollaboration"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationRole" eSuperTypes="#//Model/UMLAssociation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association role is a specific usage of an association needed in a collaboration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ConfirmingLink" upperBound="-1"
          eType="#//Model/UMLLink" eOpposite="#//Model/UMLLink/PlayedRole"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Multiplicity" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Base" eType="#//Model/UMLAssociation"
          eOpposite="#//Model/UMLAssociation/AssociationRole"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Message" upperBound="-1"
          eType="#//Model/UMLMessage" eOpposite="#//Model/UMLMessage/CommunicationConnection"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCollaborationInstanceSet" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collaboration instance set references a set of instances that jointly collaborate in performing the particular task specified by the collaboration of the collaboration instance. The instances in the collaboration instance set play the roles defined in the collaboration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="InteractionInstanceSet"
          upperBound="-1" eType="#//Model/UMLInteractionInstanceSet" containment="true"
          eOpposite="#//Model/UMLInteractionInstanceSet/Context"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Collaboration" eType="#//Model/UMLCollaboration"
          eOpposite="#//Model/UMLCollaboration/CollaborationInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParticipatingLink" upperBound="-1"
          eType="#//Model/UMLLink" containment="true" eOpposite="#//Model/UMLLink/CollaborationInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParticipatingInstance"
          lowerBound="1" upperBound="-1" eType="#//Model/UMLInstance" containment="true"
          eOpposite="#//Model/UMLInstance/CollaborationInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="RepresentedClassifier"
          eType="#//Model/UMLClassifier" eOpposite="#//Model/UMLClassifier/OwnedCollaborationInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="RepresentedOperation"
          eType="#//Model/UMLOperation" eOpposite="#//Model/UMLOperation/OwnedCollaborationInstanceSet"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInteractionInstanceSet" eSuperTypes="#//Model/UMLModelElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An interaction instance set is the set of stimuli that participate in a collaboration instance set."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Context" lowerBound="1"
          eType="#//Model/UMLCollaborationInstanceSet" eOpposite="#//Model/UMLCollaborationInstanceSet/InteractionInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Interaction" eType="#//Model/UMLInteraction"
          eOpposite="#//Model/UMLInteraction/InteractionInstanceSet"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ParticipatingStimulus"
          lowerBound="1" upperBound="-1" eType="#//Model/UMLStimulus" containment="true"
          eOpposite="#//Model/UMLStimulus/InteractionInstanceSet"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLAssociationEndRole" eSuperTypes="#//Model/UMLAssociationEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association-end role specifies an endpoint of an association as used in a collaboration."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="AvailableQualifier" upperBound="-1"
          eType="#//Model/UMLAttribute" containment="true" eOpposite="#//Model/UMLAttribute/AssociationEndRole"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="CollaborationMultiplicity"
          eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Base" eType="#//Model/UMLAssociationEnd"
          eOpposite="#//Model/UMLAssociationEnd/AssociationEndRole"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLCombinedFragment" eSuperTypes="#//Model/UMLInteractionFragment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInteractionOperand" eSuperTypes="#//Model/UMLInteractionFragment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represent one operand of the expression given by the enclosing CombinedFragment."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="Fragment" upperBound="-1"
          eType="#//Model/UMLInteractionFragment" eOpposite="#//Model/UMLInteractionFragment/EnclosingOperand"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="Guard" eType="ecore:EDataType PharoUML.ecore#//Pharo/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UMLInteractionFragment" eSuperTypes="#//Model/UMLModelElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="EnclosingOperand" eType="#//Model/UMLInteractionOperand"
          eOpposite="#//Model/UMLInteractionOperand/Fragment"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="Enumerations" nsURI="href://pharo.org/XMI" nsPrefix="xmi">
    <eClassifiers xsi:type="ecore:EEnum" name="UMLPseudostateKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel, PseudostateKind defines an enumeration that discriminates the kind of Pseudostate."/>
      </eAnnotations>
      <eLiterals name="Choice"/>
      <eLiterals name="Decision" value="1"/>
      <eLiterals name="DeepHistory" value="2"/>
      <eLiterals name="Initial" value="3"/>
      <eLiterals name="Junction" value="4"/>
      <eLiterals name="ShallowHistory" value="5"/>
      <eLiterals name="Synchronisation" value="6"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLVisibilityKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space."/>
      </eAnnotations>
      <eLiterals name="Package"/>
      <eLiterals name="Private" value="1"/>
      <eLiterals name="Protected" value="2"/>
      <eLiterals name="Public" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLAggregationKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes what kind of aggregation an Association is. When placed on a target end, specifies the relationship of the target end to the source end."/>
      </eAnnotations>
      <eLiterals name="Aggregate"/>
      <eLiterals name="Composite" value="1"/>
      <eLiterals name="None" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLCallConcurrencyKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An enumeration that denotes the semantics of multiple concurrent calls to the same passive instance; that is, an Instance originating from a Classifier with isActive=false."/>
      </eAnnotations>
      <eLiterals name="Concurrent"/>
      <eLiterals name="Guarded" value="1"/>
      <eLiterals name="Sequential" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLChangeableKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ChangeableKind defines an enumeration that denotes how an AttributeLink or LinkEnd may be modified."/>
      </eAnnotations>
      <eLiterals name="AddOnly"/>
      <eLiterals name="Changeable" value="1"/>
      <eLiterals name="Frozen" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLOrderingKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value modify the set. The intent is that the set of enumeration literals be open for new values to be added by tools for purposes of design, code generation, etc. For example, a value of sorted might be used for a design specification."/>
      </eAnnotations>
      <eLiterals name="Ordered"/>
      <eLiterals name="Unordered" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLParameterDirectionKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ParameterDirectionKind defines an enumeration that denotes if a Parameter is used for supplying an argument and/or for returning a value."/>
      </eAnnotations>
      <eLiterals name="In"/>
      <eLiterals name="Inout" value="1"/>
      <eLiterals name="Out" value="2"/>
      <eLiterals name="Return" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLScopeKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier."/>
      </eAnnotations>
      <eLiterals name="Classifier"/>
      <eLiterals name="Instance" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="UMLInteractionOperatorKind">
      <eLiterals name="Alt"/>
      <eLiterals name="Assert" value="1"/>
      <eLiterals name="Break" value="2"/>
      <eLiterals name="Consider" value="3"/>
      <eLiterals name="Ignore" value="4"/>
      <eLiterals name="Loop" value="5"/>
      <eLiterals name="Neg" value="6"/>
      <eLiterals name="Opt" value="7"/>
      <eLiterals name="Par" value="8"/>
      <eLiterals name="Region" value="9"/>
      <eLiterals name="Seq" value="10"/>
      <eLiterals name="Strict" value="11"/>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
